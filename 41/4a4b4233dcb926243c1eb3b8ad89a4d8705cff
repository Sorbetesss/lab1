---------------------------------------------------------------------------

by fabpot at 2016-06-16T19:22:38Z

What about just removing the `(string)` cast of the fallback. I think this should be enough.

---------------------------------------------------------------------------

by c960657 at 2016-06-16T20:46:29Z

@fabpot I'm not sure which cast you are referring to?

If we remove the cast in `FlattenException::flattenArgs()`, we will be labeling numbers as `string`, and such values are explicitly quoted in `CodeExtension::formatArgs()` and `ExceptionHandler::formatArgs()`. And it seems wrong to label numbers as strings.

If we remove the cast in `CodeExtension::formatArgs()` and `ExceptionHandler::formatArgs()`, we might as well remove the special case for `string` also and handle strings and numbers using the same var_export().

---------------------------------------------------------------------------

by fabpot at 2016-06-16T20:48:32Z

In `$formattedValue = str_replace("\n", '', var_export($this->escapeHtml((string) $item[1]), true));`

---------------------------------------------------------------------------

by c960657 at 2016-06-16T21:10:01Z

Like this?

---------------------------------------------------------------------------

by c960657 at 2016-06-16T21:16:43Z

I also changed the flags for `htmlspecialchars()` in `CodeExtension` to avoid escaping the single-quotes generated by `var_export()`. This change is similar to that in #18841 (and probably should have been included in that fix).

---------------------------------------------------------------------------

by fabpot at 2016-06-17T05:30:53Z

Yes! New integer and float types can be removed now.

---------------------------------------------------------------------------

by c960657 at 2016-06-17T06:34:36Z

It seems wrong to label integers and floats as `string`, doesnâ€™t it?

---------------------------------------------------------------------------

by fabpot at 2016-06-17T17:56:30Z

@c960657 Right
