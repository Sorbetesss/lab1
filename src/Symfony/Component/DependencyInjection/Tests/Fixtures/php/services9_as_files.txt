Array
(
    [ContainerB4qnkfR/removed-ids.php] => <?php

namespace ContainerB4qnkfR;

return [
    'Psr\\Container\\ContainerInterface' => true,
    'Symfony\\Component\\DependencyInjection\\ContainerInterface' => true,
    'configurator_service' => true,
    'configurator_service_simple' => true,
    'decorated.pif-pouf' => true,
    'decorator_service.inner' => true,
    'errored_definition' => true,
    'errored_one' => true,
    'factory_simple' => true,
    'inlined' => true,
    'new_factory' => true,
    'tagged_iterator_foo' => true,
];

    [ContainerB4qnkfR/getBAR2Service.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getBAR2Service extends ProjectServiceContainer
{
    /**
     * Gets the public 'BAR' shared service.
     *
     * @return \stdClass
     */
    public static function do($container, $lazyLoad = true)
    {
        $container->services['BAR'] = $instance = new \stdClass();

        $instance->bar = ($container->services['bar'] ?? $container->getBarService());

        return $instance;
    }
}

    [ContainerB4qnkfR/getBAR22Service.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getBAR22Service extends ProjectServiceContainer
{
    /**
     * Gets the public 'BAR2' shared service.
     *
     * @return \stdClass
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->services['BAR2'] = new \stdClass();
    }
}

    [ContainerB4qnkfR/getBar23Service.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getBar23Service extends ProjectServiceContainer
{
    /**
     * Gets the public 'bar2' shared service.
     *
     * @return \stdClass
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->services['bar2'] = new \stdClass();
    }
}

    [ContainerB4qnkfR/getBazService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getBazService extends ProjectServiceContainer
{
    /**
     * Gets the public 'baz' shared service.
     *
     * @return \Baz
     */
    public static function do($container, $lazyLoad = true)
    {
        $container->services['baz'] = $instance = new \Baz();

        $instance->setFoo(($container->services['foo_with_inline'] ?? $container->load('getFooWithInlineService')));

        return $instance;
    }
}

    [ContainerB4qnkfR/getConfiguredServiceService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getConfiguredServiceService extends ProjectServiceContainer
{
    /**
     * Gets the public 'configured_service' shared service.
     *
     * @return \stdClass
     */
    public static function do($container, $lazyLoad = true)
    {
        $container->services['configured_service'] = $instance = new \stdClass();

        $a = new \ConfClass();
        $a->setFoo(($container->services['baz'] ?? $container->load('getBazService')));

        $a->configureStdClass($instance);

        return $instance;
    }
}

    [ContainerB4qnkfR/getConfiguredServiceSimpleService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getConfiguredServiceSimpleService extends ProjectServiceContainer
{
    /**
     * Gets the public 'configured_service_simple' shared service.
     *
     * @return \stdClass
     */
    public static function do($container, $lazyLoad = true)
    {
        $container->services['configured_service_simple'] = $instance = new \stdClass();

        (new \ConfClass('bar'))->configureStdClass($instance);

        return $instance;
    }
}

    [ContainerB4qnkfR/getDecoratorServiceService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDecoratorServiceService extends ProjectServiceContainer
{
    /**
     * Gets the public 'decorator_service' shared service.
     *
     * @return \stdClass
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->services['decorator_service'] = new \stdClass();
    }
}

    [ContainerB4qnkfR/getDecoratorServiceWithNameService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDecoratorServiceWithNameService extends ProjectServiceContainer
{
    /**
     * Gets the public 'decorator_service_with_name' shared service.
     *
     * @return \stdClass
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->services['decorator_service_with_name'] = new \stdClass();
    }
}

    [ContainerB4qnkfR/getDeprecatedServiceService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDeprecatedServiceService extends ProjectServiceContainer
{
    /**
     * Gets the public 'deprecated_service' shared service.
     *
     * @return \stdClass
     *
     * @deprecated Since vendor/package 1.1: The "deprecated_service" service is deprecated. You should stop using it, as it will be removed in the future.
     */
    public static function do($container, $lazyLoad = true)
    {
        trigger_deprecation('vendor/package', '1.1', 'The "deprecated_service" service is deprecated. You should stop using it, as it will be removed in the future.');

        return $container->services['deprecated_service'] = new \stdClass();
    }
}

    [ContainerB4qnkfR/getFactoryServiceService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getFactoryServiceService extends ProjectServiceContainer
{
    /**
     * Gets the public 'factory_service' shared service.
     *
     * @return \Bar
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->services['factory_service'] = ($container->services['foo.baz'] ?? $container->load('getFoo_BazService'))->getInstance();
    }
}

    [ContainerB4qnkfR/getFactoryServiceSimpleService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getFactoryServiceSimpleService extends ProjectServiceContainer
{
    /**
     * Gets the public 'factory_service_simple' shared service.
     *
     * @return \Bar
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->services['factory_service_simple'] = $container->load('getFactorySimpleService')->getInstance();
    }
}

    [ContainerB4qnkfR/getFactorySimpleService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getFactorySimpleService extends ProjectServiceContainer
{
    /**
     * Gets the private 'factory_simple' shared service.
     *
     * @return \SimpleFactoryClass
     *
     * @deprecated Since vendor/package 1.1: The "factory_simple" service is deprecated. You should stop using it, as it will be removed in the future.
     */
    public static function do($container, $lazyLoad = true)
    {
        trigger_deprecation('vendor/package', '1.1', 'The "factory_simple" service is deprecated. You should stop using it, as it will be removed in the future.');

        return new \SimpleFactoryClass('foo');
    }
}

    [ContainerB4qnkfR/getFooService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getFooService extends ProjectServiceContainer
{
    /**
     * Gets the public 'foo' shared service.
     *
     * @return \Bar\FooClass
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['foo.baz'] ?? $container->load('getFoo_BazService'));

        $container->services['foo'] = $instance = \Bar\FooClass::getInstance('foo', $a, ['bar' => 'foo is bar', 'foobar' => 'bar'], true, $container);

        $instance->foo = 'bar';
        $instance->moo = $a;
        $instance->qux = ['bar' => 'foo is bar', 'foobar' => 'bar'];
        $instance->setBar(($container->services['bar'] ?? $container->getBarService()));
        $instance->initialize();
        sc_configure($instance);

        return $instance;
    }
}

    [ContainerB4qnkfR/getFoo_BazService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getFoo_BazService extends ProjectServiceContainer
{
    /**
     * Gets the public 'foo.baz' shared service.
     *
     * @return \BazClass
     */
    public static function do($container, $lazyLoad = true)
    {
        $container->services['foo.baz'] = $instance = \BazClass::getInstance();

        \BazClass::configureStatic1($instance);

        return $instance;
    }
}

    [ContainerB4qnkfR/getFooBarService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getFooBarService extends ProjectServiceContainer
{
    /**
     * Gets the public 'foo_bar' service.
     *
     * @return \Bar\FooClass
     */
    public static function do($container, $lazyLoad = true)
    {
        return new \Bar\FooClass(($container->services['deprecated_service'] ?? $container->load('getDeprecatedServiceService')));
    }
}

    [ContainerB4qnkfR/getFooWithInlineService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getFooWithInlineService extends ProjectServiceContainer
{
    /**
     * Gets the public 'foo_with_inline' shared service.
     *
     * @return \Foo
     */
    public static function do($container, $lazyLoad = true)
    {
        $container->services['foo_with_inline'] = $instance = new \Foo();

        $a = new \Bar();
        $a->pub = 'pub';
        $a->setBaz(($container->services['baz'] ?? $container->load('getBazService')));

        $instance->setBar($a);

        return $instance;
    }
}

    [ContainerB4qnkfR/getLazyContextService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getLazyContextService extends ProjectServiceContainer
{
    /**
     * Gets the public 'lazy_context' shared service.
     *
     * @return \LazyContext
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->services['lazy_context'] = new \LazyContext(new RewindableGenerator(function () use ($container) {
            yield 'k1' => ($container->services['foo.baz'] ?? $container->load('getFoo_BazService'));
            yield 'k2' => $container;
        }, 2), new RewindableGenerator(function () use ($container) {
            return new \EmptyIterator();
        }, 0));
    }
}

    [ContainerB4qnkfR/getLazyContextIgnoreInvalidRefService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getLazyContextIgnoreInvalidRefService extends ProjectServiceContainer
{
    /**
     * Gets the public 'lazy_context_ignore_invalid_ref' shared service.
     *
     * @return \LazyContext
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->services['lazy_context_ignore_invalid_ref'] = new \LazyContext(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->services['foo.baz'] ?? $container->load('getFoo_BazService'));
        }, 1), new RewindableGenerator(function () use ($container) {
            return new \EmptyIterator();
        }, 0));
    }
}

    [ContainerB4qnkfR/getMethodCall1Service.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMethodCall1Service extends ProjectServiceContainer
{
    /**
     * Gets the public 'method_call1' shared service.
     *
     * @return \Bar\FooClass
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once $container->targetDir.''.'/Fixtures/includes/foo.php';

        $container->services['method_call1'] = $instance = new \Bar\FooClass();

        $instance->setBar(($container->services['foo'] ?? $container->load('getFooService')));
        $instance->setBar(NULL);
        $instance->setBar((($container->services['foo'] ?? $container->load('getFooService'))->foo() . (($container->hasParameter("foo")) ? ($container->getParameter("foo")) : ("default"))));

        return $instance;
    }
}

    [ContainerB4qnkfR/getNewFactoryServiceService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getNewFactoryServiceService extends ProjectServiceContainer
{
    /**
     * Gets the public 'new_factory_service' shared service.
     *
     * @return \FooBarBaz
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = new \FactoryClass();
        $a->foo = 'bar';

        $container->services['new_factory_service'] = $instance = $a->getInstance();

        $instance->foo = 'bar';

        return $instance;
    }
}

    [ContainerB4qnkfR/getNoPreloadService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getNoPreloadService extends ProjectServiceContainer
{
    /**
     * Gets the public 'no_preload' shared service.
     *
     * @return \TestNoPreload
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->services['no_preload'] = new \TestNoPreload();
    }
}

    [ContainerB4qnkfR/getNonSharedFooService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getNonSharedFooService extends ProjectServiceContainer
{
    /**
     * Gets the public 'non_shared_foo' service.
     *
     * @return \Bar\FooClass
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once $container->targetDir.''.'/Fixtures/includes/foo.php';

        return new \Bar\FooClass();
    }
}

    [ContainerB4qnkfR/getPreloadNoPreloadService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPreloadNoPreloadService extends ProjectServiceContainer
{
    /**
     * Gets the public 'preload_no_preload' shared service.
     *
     * @return \TestPreloadNoPreload
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->services['preload_no_preload'] = new \TestPreloadNoPreload();
    }
}

    [ContainerB4qnkfR/getPreloadSidekickService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPreloadSidekickService extends ProjectServiceContainer
{
    /**
     * Gets the public 'preload_sidekick' shared service.
     *
     * @return \stdClass
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->services['preload_sidekick'] = new \stdClass();
    }
}

    [ContainerB4qnkfR/getRuntimeErrorService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getRuntimeErrorService extends ProjectServiceContainer
{
    /**
     * Gets the public 'runtime_error' shared service.
     *
     * @return \stdClass
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->services['runtime_error'] = new \stdClass($container->throw('Service "errored_definition" is broken.'));
    }
}

    [ContainerB4qnkfR/getServiceFromStaticMethodService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getServiceFromStaticMethodService extends ProjectServiceContainer
{
    /**
     * Gets the public 'service_from_static_method' shared service.
     *
     * @return \Bar\FooClass
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->services['service_from_static_method'] = \Bar\FooClass::getInstance();
    }
}

    [ContainerB4qnkfR/getTaggedIteratorService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getTaggedIteratorService extends ProjectServiceContainer
{
    /**
     * Gets the public 'tagged_iterator' shared service.
     *
     * @return \Bar
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->services['tagged_iterator'] = new \Bar(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->services['foo'] ?? $container->load('getFooService'));
            yield 1 => ($container->privates['tagged_iterator_foo'] ?? ($container->privates['tagged_iterator_foo'] = new \Bar()));
        }, 2));
    }
}

    [ContainerB4qnkfR/getThrowingOneService.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getThrowingOneService extends ProjectServiceContainer
{
    /**
     * Gets the public 'throwing_one' shared service.
     *
     * @return \Bar\FooClass
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->services['throwing_one'] = new \Bar\FooClass($container->throw('No-no-no-no'));
    }
}

    [ContainerB4qnkfR/ProjectServiceContainer.php] => <?php

namespace ContainerB4qnkfR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class ProjectServiceContainer extends Container
{
    protected $containerDir;
    protected $targetDir;
    protected $parameters = [];
    private $buildParameters;

    public function __construct(array $buildParameters = [], $containerDir = __DIR__)
    {
        $this->buildParameters = $buildParameters;
        $this->containerDir = $containerDir;
        $this->targetDir = \dirname($containerDir);
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->syntheticIds = [
            'request' => true,
        ];
        $this->methodMap = [
            'bar' => 'getBarService',
        ];
        $this->fileMap = [
            'BAR' => 'getBAR2Service',
            'BAR2' => 'getBAR22Service',
            'bar2' => 'getBar23Service',
            'baz' => 'getBazService',
            'configured_service' => 'getConfiguredServiceService',
            'configured_service_simple' => 'getConfiguredServiceSimpleService',
            'decorator_service' => 'getDecoratorServiceService',
            'decorator_service_with_name' => 'getDecoratorServiceWithNameService',
            'deprecated_service' => 'getDeprecatedServiceService',
            'factory_service' => 'getFactoryServiceService',
            'factory_service_simple' => 'getFactoryServiceSimpleService',
            'foo' => 'getFooService',
            'foo.baz' => 'getFoo_BazService',
            'foo_bar' => 'getFooBarService',
            'foo_with_inline' => 'getFooWithInlineService',
            'lazy_context' => 'getLazyContextService',
            'lazy_context_ignore_invalid_ref' => 'getLazyContextIgnoreInvalidRefService',
            'method_call1' => 'getMethodCall1Service',
            'new_factory_service' => 'getNewFactoryServiceService',
            'no_preload' => 'getNoPreloadService',
            'non_shared_foo' => 'getNonSharedFooService',
            'preload_no_preload' => 'getPreloadNoPreloadService',
            'preload_sidekick' => 'getPreloadSidekickService',
            'runtime_error' => 'getRuntimeErrorService',
            'service_from_static_method' => 'getServiceFromStaticMethodService',
            'tagged_iterator' => 'getTaggedIteratorService',
            'throwing_one' => 'getThrowingOneService',
        ];
        $this->aliases = [
            'alias_for_alias' => 'foo',
            'alias_for_foo' => 'foo',
            'decorated' => 'decorator_service_with_name',
        ];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return require $this->containerDir.\DIRECTORY_SEPARATOR.'removed-ids.php';
    }

    protected function load($file, $lazyLoad = true)
    {
        if (class_exists($class = __NAMESPACE__.'\\'.$file, false)) {
            return $class::do($this, $lazyLoad);
        }

        if ('.' === $file[-4]) {
            $class = substr($class, 0, -4);
        } else {
            $file .= '.php';
        }

        $service = require $this->containerDir.\DIRECTORY_SEPARATOR.$file;

        return class_exists($class, false) ? $class::do($this, $lazyLoad) : $service;
    }

    /**
     * Gets the public 'bar' shared service.
     *
     * @return \Bar\FooClass
     */
    protected function getBarService()
    {
        $a = ($this->services['foo.baz'] ?? $this->load('getFoo_BazService'));

        $this->services['bar'] = $instance = new \Bar\FooClass('foo', $a, $this->getParameter('foo_bar'));

        $a->configure($instance);

        return $instance;
    }

    public function getParameter(string $name)
    {
        if (isset($this->buildParameters[$name])) {
            return $this->buildParameters[$name];
        }

        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        if (isset($this->buildParameters[$name])) {
            return true;
        }

        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (null === $this->parameterBag) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            foreach ($this->buildParameters as $name => $value) {
                $parameters[$name] = $value;
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        throw new InvalidArgumentException(sprintf('The dynamic parameter "%s" must be defined.', $name));
    }

    protected function getDefaultParameters(): array
    {
        return [
            'baz_class' => 'BazClass',
            'foo_class' => 'Bar\\FooClass',
            'foo' => 'bar',
        ];
    }

    protected function throw($message)
    {
        throw new RuntimeException($message);
    }
}

    [ProjectServiceContainer.preload.php] => <?php

// This file has been auto-generated by the Symfony Dependency Injection Component
// You can reference it in the "opcache.preload" php.ini setting on PHP >= 7.4 when preloading is desired

use Symfony\Component\DependencyInjection\Dumper\Preloader;

require dirname(__DIR__, 5).'/vendor/autoload.php';
require __DIR__.'/ContainerB4qnkfR/ProjectServiceContainer.php';
require __DIR__.'/ContainerB4qnkfR/getThrowingOneService.php';
require __DIR__.'/ContainerB4qnkfR/getTaggedIteratorService.php';
require __DIR__.'/ContainerB4qnkfR/getServiceFromStaticMethodService.php';
require __DIR__.'/ContainerB4qnkfR/getRuntimeErrorService.php';
require __DIR__.'/ContainerB4qnkfR/getPreloadSidekickService.php';
require __DIR__.'/ContainerB4qnkfR/getPreloadNoPreloadService.php';
require __DIR__.'/ContainerB4qnkfR/getNonSharedFooService.php';
require __DIR__.'/ContainerB4qnkfR/getNewFactoryServiceService.php';
require __DIR__.'/ContainerB4qnkfR/getMethodCall1Service.php';
require __DIR__.'/ContainerB4qnkfR/getLazyContextIgnoreInvalidRefService.php';
require __DIR__.'/ContainerB4qnkfR/getLazyContextService.php';
require __DIR__.'/ContainerB4qnkfR/getFooWithInlineService.php';
require __DIR__.'/ContainerB4qnkfR/getFooBarService.php';
require __DIR__.'/ContainerB4qnkfR/getFoo_BazService.php';
require __DIR__.'/ContainerB4qnkfR/getFooService.php';
require __DIR__.'/ContainerB4qnkfR/getFactoryServiceSimpleService.php';
require __DIR__.'/ContainerB4qnkfR/getFactoryServiceService.php';
require __DIR__.'/ContainerB4qnkfR/getDecoratorServiceWithNameService.php';
require __DIR__.'/ContainerB4qnkfR/getDecoratorServiceService.php';
require __DIR__.'/ContainerB4qnkfR/getConfiguredServiceSimpleService.php';
require __DIR__.'/ContainerB4qnkfR/getConfiguredServiceService.php';
require __DIR__.'/ContainerB4qnkfR/getBazService.php';
require __DIR__.'/ContainerB4qnkfR/getBar23Service.php';
require __DIR__.'/ContainerB4qnkfR/getBAR22Service.php';
require __DIR__.'/ContainerB4qnkfR/getBAR2Service.php';

$classes = [];
$classes[] = 'Bar\FooClass';
$classes[] = 'Baz';
$classes[] = 'ConfClass';
$classes[] = 'Bar';
$classes[] = 'BazClass';
$classes[] = 'Foo';
$classes[] = 'LazyContext';
$classes[] = 'FooBarBaz';
$classes[] = 'FactoryClass';
$classes[] = 'TestPreloadNoPreload';
$classes[] = 'Some\Sidekick1';
$classes[] = 'Some\Sidekick2';
$classes[] = 'Request';
$classes[] = 'Symfony\Component\DependencyInjection\ContainerInterface';

Preloader::preload($classes);

    [ProjectServiceContainer.php] => <?php

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

if (\class_exists(\ContainerB4qnkfR\ProjectServiceContainer::class, false)) {
    // no-op
} elseif (!include __DIR__.'/ContainerB4qnkfR/ProjectServiceContainer.php') {
    touch(__DIR__.'/ContainerB4qnkfR.legacy');

    return;
}

if (!\class_exists(ProjectServiceContainer::class, false)) {
    \class_alias(\ContainerB4qnkfR\ProjectServiceContainer::class, ProjectServiceContainer::class, false);
}

return new \ContainerB4qnkfR\ProjectServiceContainer([
    'container.build_hash' => 'B4qnkfR',
    'container.build_id' => '8094687a',
    'container.build_time' => 1588866825,
], __DIR__.\DIRECTORY_SEPARATOR.'ContainerB4qnkfR');

)
