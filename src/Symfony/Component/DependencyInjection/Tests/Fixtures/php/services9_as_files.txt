Array
(
    [ProjectServiceContainer.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

/**
 * ProjectServiceContainer.
 *
 * This class has been auto-generated
 * by the Symfony Dependency Injection Component.
 *
 * @final since Symfony 3.3
 */
class ProjectServiceContainer extends Container
{
    private $parameters;
    private $targetDirs = array();
    private $privates = array();

    /**
     * Constructor.
     */
    public function __construct()
    {
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = array();
        $this->methodMap = array(
            'foo_bar' => 'getFooBarService',
        );
        $this->fileMap = array(
            'BAR' => __DIR__.'/ProjectServiceContainer/getBARService.php',
            'BAR2' => __DIR__.'/ProjectServiceContainer/getBAR2Service.php',
            'bar' => __DIR__.'/ProjectServiceContainer/getBar3Service.php',
            'bar2' => __DIR__.'/ProjectServiceContainer/getBar22Service.php',
            'baz' => __DIR__.'/ProjectServiceContainer/getBazService.php',
            'configured_service' => __DIR__.'/ProjectServiceContainer/getConfiguredServiceService.php',
            'configured_service_simple' => __DIR__.'/ProjectServiceContainer/getConfiguredServiceSimpleService.php',
            'decorator_service' => __DIR__.'/ProjectServiceContainer/getDecoratorServiceService.php',
            'decorator_service_with_name' => __DIR__.'/ProjectServiceContainer/getDecoratorServiceWithNameService.php',
            'deprecated_service' => __DIR__.'/ProjectServiceContainer/getDeprecatedServiceService.php',
            'factory_service' => __DIR__.'/ProjectServiceContainer/getFactoryServiceService.php',
            'factory_service_simple' => __DIR__.'/ProjectServiceContainer/getFactoryServiceSimpleService.php',
            'foo' => __DIR__.'/ProjectServiceContainer/getFooService.php',
            'foo.baz' => __DIR__.'/ProjectServiceContainer/getFoo_BazService.php',
            'foo_with_inline' => __DIR__.'/ProjectServiceContainer/getFooWithInlineService.php',
            'lazy_context' => __DIR__.'/ProjectServiceContainer/getLazyContextService.php',
            'lazy_context_ignore_invalid_ref' => __DIR__.'/ProjectServiceContainer/getLazyContextIgnoreInvalidRefService.php',
            'method_call1' => __DIR__.'/ProjectServiceContainer/getMethodCall1Service.php',
            'new_factory_service' => __DIR__.'/ProjectServiceContainer/getNewFactoryServiceService.php',
            'service_from_static_method' => __DIR__.'/ProjectServiceContainer/getServiceFromStaticMethodService.php',
        );
        $this->aliases = array(
            'alias_for_alias' => 'foo',
            'alias_for_foo' => 'foo',
            'decorated' => 'decorator_service_with_name',
        );
    }

    /**
     * {@inheritdoc}
     */
    public function reset()
    {
        $this->privates = array();
        parent::reset();
    }

    /**
     * {@inheritdoc}
     */
    public function compile()
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    /**
     * {@inheritdoc}
     */
    public function isCompiled()
    {
        return true;
    }

    /**
     * {@inheritdoc}
     */
    protected function requireInScope($file, $lazyLoad = true)
    {
        return require $file;
    }

    /**
     * Gets the public 'foo_bar' service.
     *
     * @return \Bar\FooClass
     */
    protected function getFooBarService()
    {
        return new \Bar\FooClass(($this->services['deprecated_service'] ?? $this->requireInScope(__DIR__.'/ProjectServiceContainer/getDeprecatedServiceService.php')));
    }

    /**
     * {@inheritdoc}
     */
    public function getParameter($name)
    {
        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || array_key_exists($name, $this->parameters))) {
            $name = strtolower($name);

            if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || array_key_exists($name, $this->parameters))) {
                throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
            }
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    /**
     * {@inheritdoc}
     */
    public function hasParameter($name)
    {
        $name = strtolower($name);

        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || array_key_exists($name, $this->parameters);
    }

    /**
     * {@inheritdoc}
     */
    public function setParameter($name, $value)
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    /**
     * {@inheritdoc}
     */
    public function getParameterBag()
    {
        if (null === $this->parameterBag) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = array();
    private $dynamicParameters = array();

    /**
     * Computes a dynamic parameter.
     *
     * @param string The name of the dynamic parameter to load
     *
     * @return mixed The value of the dynamic parameter
     *
     * @throws InvalidArgumentException When the dynamic parameter does not exist
     */
    private function getDynamicParameter($name)
    {
        throw new InvalidArgumentException(sprintf('The dynamic parameter "%s" must be defined.', $name));
    }

    /**
     * Gets the default parameters.
     *
     * @return array An array of the default parameters
     */
    protected function getDefaultParameters()
    {
        return array(
            'baz_class' => 'BazClass',
            'foo_class' => 'Bar\\FooClass',
            'foo' => 'bar',
        );
    }
}

    [ProjectServiceContainer/getBARService.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'BAR' shared service.

$this->services['BAR'] = $instance = new \stdClass();

$instance->bar = ($this->services['bar'] ?? $this->requireInScope(__DIR__.'/getBar3Service.php'));

return $instance;

    [ProjectServiceContainer/getBAR2Service.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'BAR2' shared service.

return $this->services['BAR2'] = new \stdClass();

    [ProjectServiceContainer/getBar3Service.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'bar' shared service.

$a = ($this->services['foo.baz'] ?? $this->requireInScope(__DIR__.'/getFoo_BazService.php'));

$this->services['bar'] = $instance = new \Bar\FooClass('foo', $a, $this->getParameter('foo_bar'));

$a->configure($instance);

return $instance;

    [ProjectServiceContainer/getBar22Service.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'bar2' shared service.

return $this->services['bar2'] = new \stdClass();

    [ProjectServiceContainer/getBazService.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'baz' shared service.

$this->services['baz'] = $instance = new \Baz();

$instance->setFoo(($this->services['foo_with_inline'] ?? $this->requireInScope(__DIR__.'/getFooWithInlineService.php')));

return $instance;

    [ProjectServiceContainer/getConfiguredServiceService.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'configured_service' shared service.

$a = new \ConfClass();
$a->setFoo(($this->services['baz'] ?? $this->requireInScope(__DIR__.'/getBazService.php')));

$this->services['configured_service'] = $instance = new \stdClass();

$a->configureStdClass($instance);

return $instance;

    [ProjectServiceContainer/getConfiguredServiceSimpleService.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'configured_service_simple' shared service.

$this->services['configured_service_simple'] = $instance = new \stdClass();

(new \ConfClass('bar'))->configureStdClass($instance);

return $instance;

    [ProjectServiceContainer/getDecoratorServiceService.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'decorator_service' shared service.

return $this->services['decorator_service'] = new \stdClass();

    [ProjectServiceContainer/getDecoratorServiceWithNameService.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'decorator_service_with_name' shared service.

return $this->services['decorator_service_with_name'] = new \stdClass();

    [ProjectServiceContainer/getDeprecatedServiceService.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'deprecated_service' shared service.

@trigger_error('The "deprecated_service" service is deprecated. You should stop using it, as it will soon be removed.', E_USER_DEPRECATED);

return $this->services['deprecated_service'] = new \stdClass();

    [ProjectServiceContainer/getFactoryServiceService.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'factory_service' shared service.

return $this->services['factory_service'] = ($this->services['foo.baz'] ?? $this->requireInScope(__DIR__.'/getFoo_BazService.php'))->getInstance();

    [ProjectServiceContainer/getFactoryServiceSimpleService.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'factory_service_simple' shared service.

return $this->services['factory_service_simple'] = ($this->privates['factory_simple'] ?? $this->requireInScope(__DIR__.'/getFactorySimpleService.php'))->getInstance();

    [ProjectServiceContainer/getFactorySimpleService.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the private 'factory_simple' shared service.

@trigger_error('The "factory_simple" service is deprecated. You should stop using it, as it will soon be removed.', E_USER_DEPRECATED);

return $this->privates['factory_simple'] = new \SimpleFactoryClass('foo');

    [ProjectServiceContainer/getFooService.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'foo' shared service.

$a = ($this->services['foo.baz'] ?? $this->requireInScope(__DIR__.'/getFoo_BazService.php'));

$this->services['foo'] = $instance = \Bar\FooClass::getInstance('foo', $a, array('bar' => 'foo is bar', 'foobar' => 'bar'), true, $this);

$instance->foo = 'bar';
$instance->moo = $a;
$instance->qux = array('bar' => 'foo is bar', 'foobar' => 'bar');
$instance->setBar(($this->services['bar'] ?? $this->requireInScope(__DIR__.'/getBar3Service.php')));
$instance->initialize();
sc_configure($instance);

return $instance;

    [ProjectServiceContainer/getFoo_BazService.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'foo.baz' shared service.

$this->services['foo.baz'] = $instance = \BazClass::getInstance();

\BazClass::configureStatic1($instance);

return $instance;

    [ProjectServiceContainer/getFooWithInlineService.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'foo_with_inline' shared service.

$a = new \Bar();

$this->services['foo_with_inline'] = $instance = new \Foo();

$a->pub = 'pub';
$a->setBaz(($this->services['baz'] ?? $this->requireInScope(__DIR__.'/getBazService.php')));

$instance->setBar($a);

return $instance;

    [ProjectServiceContainer/getLazyContextService.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'lazy_context' shared service.

return $this->services['lazy_context'] = new \LazyContext(new RewindableGenerator(function () {
    yield 'k1' => ($this->services['foo.baz'] ?? $this->requireInScope(__DIR__.'/getFoo_BazService.php'));
    yield 'k2' => $this;
}, 2), new RewindableGenerator(function () {
    return new \EmptyIterator();
}, 0));

    [ProjectServiceContainer/getLazyContextIgnoreInvalidRefService.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'lazy_context_ignore_invalid_ref' shared service.

return $this->services['lazy_context_ignore_invalid_ref'] = new \LazyContext(new RewindableGenerator(function () {
    yield 0 => ($this->services['foo.baz'] ?? $this->requireInScope(__DIR__.'/getFoo_BazService.php'));
}, 1), new RewindableGenerator(function () {
    return new \EmptyIterator();
}, 0));

    [ProjectServiceContainer/getMethodCall1Service.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'method_call1' shared service.

require_once '%path%foo.php';

$this->services['method_call1'] = $instance = new \Bar\FooClass();

$instance->setBar(($this->services['foo'] ?? $this->requireInScope(__DIR__.'/getFooService.php')));
$instance->setBar(NULL);
$instance->setBar((($this->services['foo'] ?? $this->requireInScope(__DIR__.'/getFooService.php'))->foo() . (($this->hasParameter("foo")) ? ($this->getParameter("foo")) : ("default"))));

return $instance;

    [ProjectServiceContainer/getNewFactoryServiceService.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'new_factory_service' shared service.

$a = new \FactoryClass();
$a->foo = 'bar';

$this->services['new_factory_service'] = $instance = $a->getInstance();

$instance->foo = 'bar';

return $instance;

    [ProjectServiceContainer/getServiceFromStaticMethodService.php] => <?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.

// Returns the public 'service_from_static_method' shared service.

return $this->services['service_from_static_method'] = \Bar\FooClass::getInstance();

)
