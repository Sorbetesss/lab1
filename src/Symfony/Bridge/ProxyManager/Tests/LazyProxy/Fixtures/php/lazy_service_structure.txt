<?php

use %a
class LazyServiceProjectServiceContainer extends Container
{%a
    protected function getFooService($lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $this->services['foo'] = $this->createProxy('stdClass_%s', function () {
                return \stdClass_%s::staticProxyConstructor(function (\ProxyManager\Proxy\GhostObjectInterface $proxy, string $method, array $parameters, &$initializer, array $properties) {
                    $instance = $this->getFooService($proxy);
                    $initializer = null;

                    if ($instance !== $proxy) {
                        throw new \LogicException(sprintf('A lazy initializer should return the ghost object proxy it was given as argument, but an instance of "%s" was returned.', get_debug_type($instance)));
                    }

                    return true;
                });
            });
        }

        $instance = $lazyLoad;

        $instance->bar = 123;

        return $instance;
    }
}

class stdClass_%s extends \stdClass implements \ProxyManager\%s
{%a}%A
