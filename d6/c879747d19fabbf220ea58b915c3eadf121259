---------------------------------------------------------------------------

by fabpot at 2023-10-06T16:58:27Z

Fixing it is not possible in 5.4.
I propose to deprecate the possibility of sending a message with a closed generator in 6.4 and throw in 7.0. That way, we don't need to store the generator result and that avoids the memory leak.

---------------------------------------------------------------------------

by stof at 2023-10-06T17:21:40Z

@fabpot the issue is not just about sending a message with a closed generator. If you try to both access the string content and serialize the object, this will make 2 usages of the iterator, with the RawMessage being the one closing the generator in the first usage.

---------------------------------------------------------------------------

by fabpot at 2023-10-06T20:02:56Z

@stof Sure, but that's not something people will do. What would you suggest?

---------------------------------------------------------------------------

by chalasr at 2023-10-07T02:56:31Z

Isn't patching only `toIterable()` enough to fix the issue?
```diff
diff --git a/src/Symfony/Component/Mime/RawMessage.php b/src/Symfony/Component/Mime/RawMessage.php
index d2a311daeb..14223d3d7f 100644
--- a/src/Symfony/Component/Mime/RawMessage.php
+++ b/src/Symfony/Component/Mime/RawMessage.php
@@ -48,12 +48,9 @@ class RawMessage implements \Serializable
             return;
         }

-        $message = '';
         foreach ($this->message as $chunk) {
-            $message .= $chunk;
             yield $chunk;
         }
-        $this->message = $message;
     }

     /**
```
Transforming the generator to an array in `toString()` seems unavoidable, unless we forbid calling toString() more than once which sounds worse.
