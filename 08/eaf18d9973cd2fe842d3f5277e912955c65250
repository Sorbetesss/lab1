---------------------------------------------------------------------------

by Wirone at 2018-09-25T17:55:34Z

I don't get what's the purpose of having `.env.prod` while at the same time discuraging or even blocking `DotEnv` usage on production :thinking: Also, development instances shouldn't use production configuration. `.env.prod` should not be commited, nor included in built Docker image. So what is the use case for it?

I don't like the idea of this PR. It makes simple task (app configuration) much more complicated and IMO doesn't bring added value (the only one I see is configuring variables for different environments and use it only by changing `APP_ENV`, without need to edit `.env` by commenting/uncommenting lines per environment). I thought that YAML files' split (packages in `prod`/`dev` subdirectories) and `.env` file were supposed to fulfill all the config scenarios. This is a step back for me.

But maybe I don't understand something..

---------------------------------------------------------------------------

by fbourigault at 2018-09-25T18:26:39Z

The first use case I have is to have on a local machine the dev and test environments running at the "same" time. I mainly have a different `DATABASE_URL` env variable which is probably different per developer and I don't want to use `DATABSE_URL=... vendor/bin/simple-phpunit`!

---------------------------------------------------------------------------

by dunglas at 2018-09-25T19:21:21Z

@Wirone .env.prod is totally optional (for people not able to set environment variables in prod). This file will not be generated by the default skeleton (only .env.test will).
However it will make easier to use Dotenv in prod in cases were there is no alternatives (shared servers usually, and even for jobs in dedicated servers without Docker/K8S).

However, having .env.test, .env.panther, .env.otherenv on the development machine will be very useful (and it’s my main goal, as I use Kubernetes in prod, without env files obviously).

---------------------------------------------------------------------------

by teohhanhui at 2018-10-04T10:10:59Z

I think what's missing from this picture is where `.dist` files fit in. We should not follow blindly the Create React App / Rails way, because it conflicts with our conventions.

---------------------------------------------------------------------------

by dunglas at 2018-10-04T22:49:09Z

@teohhanhui the whole point of this PR is to switch from “our” conventions to the ones other projects follow.
Basically, .env.dist is now .env, and  .env is now .env.local.

---------------------------------------------------------------------------

by teohhanhui at 2018-10-05T04:02:25Z

That sounds like a really bad thing to me. We shouldn't just switch conventions like that. What's wrong with sticking with `.dist`? It makes it more explicit that it's a distribution file. Plus, this would not go well with Docker Compose (`.env` is special for Docker Compose).

What I'm trying to say is, we could stick with our conventions while having all the benefits of an extended .env support like in the other projects.

---------------------------------------------------------------------------

by dunglas at 2018-10-05T04:08:26Z

This has already been discussed a lot in https://github.com/symfony/recipes/pull/466 and related tickets. It actually makes it easier to deal with Docker Compose.

---------------------------------------------------------------------------

by teohhanhui at 2018-10-05T04:19:08Z

I've read through some of the comments, but don't see how it makes it easier for anyone, compared to providing the same feature but sticking with the existing `.dist` convention.

If you check in `.env`, you'll have problems doing local overrides for Docker Compose. I'm not talking about `env_file` here, as the `.env` file is read by Docker Compose itself for special variables and variable substitution.

---------------------------------------------------------------------------

by teohhanhui at 2018-10-05T04:21:32Z

> It actually makes it easier to deal with Docker Compose.

We should make Docker Compose support `.dist` files instead, as we've discussed before. That will be a huge win for everyone.

---------------------------------------------------------------------------

by dunglas at 2018-10-05T06:29:36Z

Most popular projects work like this, so it makes it easier for an user to use both Create React App and Symfony, or to switch with Rails projects.
It also solves unrelated SF issues such as the ability to use the same format to configure all environments, to have different set of default configs for specific environment (test, e2e...), and to easily execute console commands in a specific environment.

> We should make Docker Compose support .dist files instead, as we've discussed before. That will be a huge win for everyone.

It's very unlikely that they'll accept a patch for something used only by Symfony. They would more likely accept a patch to always override the `.env` by `env.local` when available, and then support a bunch of existing projects.

Btw, Create React App works well with Docker Compose: https://github.com/facebook/create-react-app/issues/982#issuecomment-273032553
Way better than the current Symfony mess with `.dist` file (see the currently "broken" thing we have regarding env files in api-platform/api-platform to make both Docker Compose and Flex working, we don't have this problem with Create React App).

---------------------------------------------------------------------------

by dunglas at 2018-10-05T06:32:45Z

> If you check in .env, you'll have problems doing local overrides for Docker Compose. I'm not talking about env_file here, as the .env file is read by Docker Compose itself for special variables and variable substitution.

It only means that the `.env` file we generate must be compatible with Docker Compose: https://docs.docker.com/compose/env-file/
IIRC, we already had this issue with Flex, and Flex is already compatible with this.

Btw, versioning `.env` files is considered a best practice in every projects I know, except in Symfony.

---------------------------------------------------------------------------

by dunglas at 2018-10-05T06:35:09Z

> Btw, versioning `.env` files is considered a best practice in every projects I know, except in Symfony.

Not in Laravel actually: https://laravel.com/docs/5.7/configuration
At least, we'll not be accused of copying this time 😅

---------------------------------------------------------------------------

by dunglas at 2018-10-05T06:40:53Z

Tools behaving the way I propose:

* Vue CLI: https://cli.vuejs.org/guide/mode-and-env.html
* Create React App: https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-development-environment-variables-in-env
* Ruby / Rails: https://github.com/bkeepers/dotenv

---------------------------------------------------------------------------

by Wirone at 2018-10-05T07:02:59Z

@dunglas after this changes `.env` file would be a part of a project, commited to the repo?

If yes, then I see the problems like @teohhanhui for `docker-compose.yml`. We use `.env` not only to customize application's behavior, but also to customize how Docker stack is run: binding ports, Traefik labels, host manager's domain:

```
services:
    web:
        build:
            context: .
            args:
                APP_ENV: "dev" # Always build developer-friendly environment
        environment:
            # Local domain for Docker Hostmanager (https://github.com/iamluc/docker-hostmanager)
            DOMAIN_NAME: "default:${TRAEFIK_HOST:-arm.loc}"
        ports:
            - "${WEB_PORT:-8080}:80"
        labels:
            - "traefik.enable=${TRAEFIK_ENABLE:-true}"
            - "traefik.frontend.rule=Host:${TRAEFIK_HOST:-arm.loc}"
            - "traefik.port=80"

    db:
        image: mysql:5.7.22
        environment:
            MYSQL_DATABASE: foo
            MYSQL_USER: foo
            MYSQL_PASSWORD: bar
            MYSQL_ROOT_PASSWORD: bar
        ports:
            - "${DB_PORT:-3307}:3306"

    rabbitmq:
        image: rabbitmq:3.7.4-management
        environment:
            RABBITMQ_DEFAULT_USER: foo
            RABBITMQ_DEFAULT_PASS: bar
        ports:
            - "${RABBITMQ_AMQP_SECURED_PORT:-5771}:5671"
            - "${RABBITMQ_AMQP_PORT:-5772}:5672"
            - "${RABBITMQ_HTTP_API_PORT:-15772}:15672"
```
Since `.env` is ignored and configured per developer instance (based on `dist`) each developer which works with the project can customize ports, domains based on own conventions. `docker-compose.yml` is for local development and each developer has own flow, we're trying to support all (bind ports, Traefik, host manager) and ignored `.env` is essential to achieve that.

Of course, probably it can be achieved with `env_file` configuration in `docker-compose.yml` but `.env` is the default one and does not require to add anything. Consider it, maybe Symfony's `docker-compose.yml` should support `.env.local` out of the box.

---------------------------------------------------------------------------

by teohhanhui at 2018-10-05T07:12:02Z

@dunglas I can show you plenty of other projects that use the `.dist` convention, but I don't think that should be the main deciding factor here.

One important point we must not overlook is the convention already existing in some of the most popular PHP tools: `phpunit.xml.dist`, `behat.yml.dist`, `.phpcs.dist`, just to name a few. I believe this should be enough reason to stick to our conventions with no loss of functionality.

---------------------------------------------------------------------------

by dunglas at 2018-10-05T07:23:39Z

@teohhanhui anyway this PR doesn't force you to use this convention, as usual it's opt-in. Me, an a lot of developers these days (I think) use both Symfony and React or Vue. Having the same behavior regarding env files in both the frontend and backend project is a must have, especially for API Platform that brings both Create React App and Symfony in its standard edition.

---------------------------------------------------------------------------

by dunglas at 2018-10-05T07:26:09Z

@Wirone

> Consider it, maybe Symfony's docker-compose.yml should support .env.local out of the box.

I agree and I'll patch the skeleton I maintain, but Symfony doesn't have an official Docker setup for now.

---------------------------------------------------------------------------

by Wirone at 2018-10-05T08:12:12Z

@dunglas it should be probably considered in symfony/flex#54 :)
